<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="2992fd54-9485-423c-815d-a793880197f6" name="Changes" comment="- Que no Java uma classe pode herdar de somente uma única classe;&#10;- O conceito de interfaces no Java;&#10;- Que numa interface todos os métodos são públicos, não sendo então necessário utilizar a palavra reservada public na declaração deles;&#10;- Que também é possível aplicar o polimorfismo com o uso de interfaces, similar ao que foi demonstrado com a utilização da herança em aulas anteriores.">
      <change afterPath="$PROJECT_DIR$/src/main/java/exercicio/modelos/Audio.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/exercicio/modelos/MinhasPreferidas.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/exercicio/modelos/Musica.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/exercicio/modelos/Podcast.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/exercicio/principal/PrincipalExercicio.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="7fdd1b57-d4e6-434f-b473-20219e9f589e" />
        <option name="url" value="https://github.com/wandbergdelima/screenMathPoo.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="useMavenConfig" value="true" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectId" id="2VQpWnFjEEAgpby9pnkDUe63NKD" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/wandberg/Desktop/Projetos de Cursos/Alura/FilmesApi/screenmathPoo/src/main/java/org/example/Main.java&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;editor.preferences.import&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="" />
    </key>
  </component>
  <component name="RunAnythingCache">
    <option name="myCommands">
      <command value="mvn clean" />
      <command value="mvn install" />
    </option>
  </component>
  <component name="RunManager" selected="Application.PrincipalExercicio">
    <configuration name="Principal" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Principal" />
      <module name="screenmathPoo" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="PrincipalExercicio" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="exercicio.principal.PrincipalExercicio" />
      <module name="screenmathPoo" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="exercicio.principal.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.PrincipalExercicio" />
        <item itemvalue="Application.Principal" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="2992fd54-9485-423c-815d-a793880197f6" name="Changes" comment="" />
      <created>1694778194216</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1694778194216</updated>
      <workItem from="1694778195595" duration="6255000" />
      <workItem from="1695080982451" duration="594000" />
      <workItem from="1695157646109" duration="1826000" />
      <workItem from="1695160152390" duration="7268000" />
      <workItem from="1695738444907" duration="5593000" />
      <workItem from="1695866749142" duration="6456000" />
    </task>
    <task id="LOCAL-00001" summary="- O que é uma classe, sua estrutura, como criar e por que isso é um conceito fundamental na orientação a objetos;&#10;- O que são atributos: as &quot;características&quot; de um objeto, e a definir e visualizar esses valores;&#10;- A instanciar objetos;&#10;- Sobre os métodos (ou comportamentos) de um objeto;&#10;- A pensar nas entidades do mundo real em forma de objetos, que possuem características (atributos) e comportamentos ou ações (métodos).">
      <created>1695158424133</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1695158424133</updated>
    </task>
    <task id="LOCAL-00002" summary="- O que é uma classe, sua estrutura, como criar e por que isso é um conceito fundamental na orientação a objetos;&#10;- O que são atributos: as &quot;características&quot; de um objeto, e a definir e visualizar esses valores;&#10;- A instanciar objetos;&#10;- Sobre os métodos (ou comportamentos) de um objeto;&#10;- A pensar nas entidades do mundo real em forma de objetos, que possuem características (atributos) e comportamentos ou ações (métodos).">
      <created>1695160198144</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1695160198144</updated>
    </task>
    <task id="LOCAL-00003" summary="- Encapsulamento: controlar o acesso aos atributos e métodos de uma classe;&#10;- O que são os modificadores de acesso public e private;&#10;- Métodos de leitura dos atributos, que são os métodos getters;&#10;- Métodos de modificação dos atributos, que são os métodos setters;&#10;- O uso da palavra chave import, para importar classes de outros pacotes;&#10;- O uso da palavra chave this;&#10;- Boas práticas de dividir o código em pacotes, bem como a convenção usada: domínio da empresa ao contrário, onde aqui vamos colocar por exemplo br.com.alura.screenmatch.">
      <created>1695165205597</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1695165205597</updated>
    </task>
    <task id="LOCAL-00004" summary="- O problema de ter códigos duplicados em várias classes, utilizando a herança como solução;&#10;- A palavra-chave extends, utilizada para indicar que uma classe herda de outra;&#10;- Como sobrescrever um método sendo herdado, com o uso opcional da anotação @Override;&#10;- Como aplicar o conceito de polimorfismo no código, evitando métodos duplicados.">
      <option name="closed" value="true" />
      <created>1695905156012</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1695905156013</updated>
    </task>
    <task id="LOCAL-00005" summary="- Como aplicar o conceito de polimorfismo no código, evitando métodos duplicados.">
      <option name="closed" value="true" />
      <created>1695905273127</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1695905273127</updated>
    </task>
    <task id="LOCAL-00006" summary="- Que no Java uma classe pode herdar de somente uma única classe;&#10;- O conceito de interfaces no Java;&#10;- Que numa interface todos os métodos são públicos, não sendo então necessário utilizar a palavra reservada public na declaração deles;&#10;- Que também é possível aplicar o polimorfismo com o uso de interfaces, similar ao que foi demonstrado com a utilização da herança em aulas anteriores.">
      <option name="closed" value="true" />
      <created>1695907174756</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1695907174756</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <MESSAGE value="- O que é uma classe, sua estrutura, como criar e por que isso é um conceito fundamental na orientação a objetos;&#10;- O que são atributos: as &quot;características&quot; de um objeto, e a definir e visualizar esses valores;&#10;- A instanciar objetos;&#10;- Sobre os métodos (ou comportamentos) de um objeto;&#10;- A pensar nas entidades do mundo real em forma de objetos, que possuem características (atributos) e comportamentos ou ações (métodos)." />
    <MESSAGE value="- Encapsulamento: controlar o acesso aos atributos e métodos de uma classe;&#10;- O que são os modificadores de acesso public e private;&#10;- Métodos de leitura dos atributos, que são os métodos getters;&#10;- Métodos de modificação dos atributos, que são os métodos setters;&#10;- O uso da palavra chave import, para importar classes de outros pacotes;&#10;- O uso da palavra chave this;&#10;- Boas práticas de dividir o código em pacotes, bem como a convenção usada: domínio da empresa ao contrário, onde aqui vamos colocar por exemplo br.com.alura.screenmatch." />
    <MESSAGE value="- O problema de ter códigos duplicados em várias classes, utilizando a herança como solução;&#10;- A palavra-chave extends, utilizada para indicar que uma classe herda de outra;&#10;- Como sobrescrever um método sendo herdado, com o uso opcional da anotação @Override;&#10;- Como aplicar o conceito de polimorfismo no código, evitando métodos duplicados." />
    <MESSAGE value="- Como aplicar o conceito de polimorfismo no código, evitando métodos duplicados." />
    <MESSAGE value="- Que no Java uma classe pode herdar de somente uma única classe;&#10;- O conceito de interfaces no Java;&#10;- Que numa interface todos os métodos são públicos, não sendo então necessário utilizar a palavra reservada public na declaração deles;&#10;- Que também é possível aplicar o polimorfismo com o uso de interfaces, similar ao que foi demonstrado com a utilização da herança em aulas anteriores." />
    <option name="LAST_COMMIT_MESSAGE" value="- Que no Java uma classe pode herdar de somente uma única classe;&#10;- O conceito de interfaces no Java;&#10;- Que numa interface todos os métodos são públicos, não sendo então necessário utilizar a palavra reservada public na declaração deles;&#10;- Que também é possível aplicar o polimorfismo com o uso de interfaces, similar ao que foi demonstrado com a utilização da herança em aulas anteriores." />
  </component>
</project>